

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Security Research</title>
  <subtitle></subtitle>
  <updated>2023-09-03T19:27:02+09:00</updated>
  <author>
    <name>Park Min</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 Park Min </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Urmia CTF 2023] htaccess(helicoptering) writeup</title>
    <link href="http://localhost:4000/posts/urmia-ctf-htaccess/" rel="alternate" type="text/html" title="[Urmia CTF 2023] htaccess(helicoptering) writeup" />
    <published>2023-09-03T11:01:00+09:00</published>
  
    <updated>2023-09-03T13:07:44+09:00</updated>
  
    <id>http://localhost:4000/posts/urmia-ctf-htaccess/</id>
    <content src="http://localhost:4000/posts/urmia-ctf-htaccess/" />
    <author>
      <name>Park Min</name>
    </author>

  
    
    <category term="WEB" />
    
  

  
    <summary>
      





      solve


두개의 .htaccess 를 우회하면 flag를 획득할 수 있다.

$ curl http://htaccess.uctf.ir/one/flag.txt
&amp;lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&amp;gt;
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;403 Forbidden&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Forbidden&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;You don't have permission to access this resource.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;

만약 우회하지 않고 접근한다면 403을 반환한다.
R...
    </summary>
  

  </entry>

  
  <entry>
    <title>[MacOS] Apple Silicon 맥북에서 amd64 사용하기(UTM)</title>
    <link href="http://localhost:4000/posts/use-amd64-on-apple-silicon/" rel="alternate" type="text/html" title="[MacOS] Apple Silicon 맥북에서 amd64 사용하기(UTM)" />
    <published>2023-08-01T01:01:00+09:00</published>
  
    <updated>2023-09-03T13:04:24+09:00</updated>
  
    <id>http://localhost:4000/posts/use-amd64-on-apple-silicon/</id>
    <content src="http://localhost:4000/posts/use-amd64-on-apple-silicon/" />
    <author>
      <name>Park Min</name>
    </author>

  
    
    <category term="PWNABLE" />
    
  

  
    <summary>
      





      Why?


  많은 보안인들이 알고 있듯이 Apple Silicon은 포너블을 하기에 참 적합하지가 않다. 업무를 보다보면 필히 x86 바이너리를 다뤄야 하는데, Apple Silicon은 ARM 구조를 사용하고 있기 때문에 제약이 생긴다. 이에 대한 해결 방안으로 amd64 ubuntu 도커를 받고 여기에 분석 도구를 세팅하는 사용자가 많다. 하지만 이 방법은 pwndbg가 동작하지 않는 등 아직까지는 완전히 amd64를 대체할 만한 수단은 아닌 것 같다. 이 때문에 조금 무겁더라도 UTM을 이용하여 amd64 ubuntu 환경을 구축하고자 한다.




UTM 설치


  
    UTM은 QEMU 기반의 에뮬레이터이다. iOS, MacOS 에서 다른 OS를 full system emulation...
    </summary>
  

  </entry>

  
  <entry>
    <title>[iOS] iOS-Encrypted 된 IPA 복호화하기</title>
    <link href="http://localhost:4000/posts/ios-ipa-dump-frida/" rel="alternate" type="text/html" title="[iOS] iOS-Encrypted 된 IPA 복호화하기" />
    <published>2023-03-04T01:03:00+09:00</published>
  
    <updated>2023-03-04T01:03:00+09:00</updated>
  
    <id>http://localhost:4000/posts/ios-ipa-dump-frida/</id>
    <content src="http://localhost:4000/posts/ios-ipa-dump-frida/" />
    <author>
      <name>Park Min</name>
    </author>

  
    
    <category term="MOBILE" />
    
    <category term="IOS" />
    
  

  
    <summary>
      





      Why?

  최근 맡은 프로젝트에서 iOS 애플리케이션을 분석할 일이 생겼다. 점점 하다보니 왜 애플이 자기네들 제품/솔루션에 어마어마한 바운티를 걸었는지 알 것 같다. 그냥 간단한 애플리케이션 추출 과정도 번거롭고 번거롭다… iOS 애플리케이션 패키지인 IPA는 안드로이드 APK와 다르게 바로 추출한 파일을 Decompile 했을 때 분석을 할 수 없게 Instruction 들을 뭉개놓았다. 이를 해체하는 작업을 해보자.




그냥 추출하면?



  아쉽게도 탈옥 없이, 덤프 없이, 복호화 없이는 위와 같이 다 뭉개진 바이너리를 던져주는 것을 알 수 있다.
  애초에 IDA에서 “이건 iOS Encrypted 되어있는데 갠춘?” 이라고 물어본다.
  frida를 이용해서 복호화 된 IPA를 덤프...
    </summary>
  

  </entry>

  
  <entry>
    <title>[iOS] iPhone에 Frida 환경 세팅하기</title>
    <link href="http://localhost:4000/posts/ios-setting-frida/" rel="alternate" type="text/html" title="[iOS] iPhone에 Frida 환경 세팅하기" />
    <published>2023-03-04T01:02:00+09:00</published>
  
    <updated>2023-03-04T17:38:40+09:00</updated>
  
    <id>http://localhost:4000/posts/ios-setting-frida/</id>
    <content src="http://localhost:4000/posts/ios-setting-frida/" />
    <author>
      <name>Park Min</name>
    </author>

  
    
    <category term="MOBILE" />
    
    <category term="IOS" />
    
  

  
    <summary>
      





      Why?

  최근 맡은 프로젝트에서 iOS 애플리케이션을 분석할 일이 생겼다. 우열곡절 iOS 탈옥을 완료했고, 이제 frida를 세팅해보려고 한다.




분석 환경 구성하기

0. iPhone 탈옥하기

  아무래도 frida를 사용하려면 탈옥, 루팅이 필요할 것이다. 바로 이전 글에서 iOS 탈옥에 대해 다뤘으니 선행하도록 하자.


1. MacBook에 frida-tools 설치하기



  터미널을 열고 pip3 install frida-tools 으로 frida-tools를 설치한다. 이는 frida-ps, frida-trace 등 유용한 도구들을 포함한다.


2. iPhone에 frida 설치하기


  iPhone이 탈옥되어 있다면 Cydia, Sileo 등 탈옥된 기기의 패키지 관리...
    </summary>
  

  </entry>

  
  <entry>
    <title>[iOS] iOS 16.3.1 Jailbreak (on MacOS)</title>
    <link href="http://localhost:4000/posts/ios-jailbreak-16/" rel="alternate" type="text/html" title="[iOS] iOS 16.3.1 Jailbreak (on MacOS)" />
    <published>2023-03-04T01:01:00+09:00</published>
  
    <updated>2023-03-04T01:01:00+09:00</updated>
  
    <id>http://localhost:4000/posts/ios-jailbreak-16/</id>
    <content src="http://localhost:4000/posts/ios-jailbreak-16/" />
    <author>
      <name>Park Min</name>
    </author>

  
    
    <category term="MOBILE" />
    
    <category term="IOS" />
    
  

  
    <summary>
      





      Why?

  최근 맡은 프로젝트에서 iOS 애플리케이션을 분석할 일이 생겼다. APK의 경우 대충 시중에 널려있는 에뮬레이터 가져다가 (어차피 루팅 손쉽게 할 수 있으니깐 버튼 하나로) frida 설치하고 후킹 돌리면서 분석하면 되는데 iOS는 그렇게 간단한 문제가 아니더라. 대충 번개장터에서 아무 휴대폰이나 사서 다운그레이드 한 다음에 탈옥시키면 되는줄 알았다. 그런데 막상 중고로 산 핸드폰은 최신 업데이트 되어있었고, Sign 없는 버전은 설치 안되는 문제 등등 이리저리 치이다가 그냥 가장 최신인 iOS 16.3 에서 탈옥하는 방법을 택했다.




내 기기도 가능할까?

개발자에 의하면 A8 부터 A11 칩셋을 사용하는 모델까지 가능하다고 한다. 호환되는 기기 목록은 아래와 같다.

  iPho...
    </summary>
  

  </entry>

</feed>


